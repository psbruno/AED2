#include <stdio.h>
 
#include <string.h>
 
 
 
typedef struct{
 
    char nome[15];
 
    int idade;
 
}pessoa;
 
void swap(pessoa A[], int i, int j){
 
    pessoa aux = A[i];
 
    A[i] = A[j];
 
    A[j] = aux;
 
}
 
 
 
 
 
int partition(pessoa A[], int p,int r){
 
    int meio, a,b,c,medianaIndice,i,j;
 
    pessoa pivo;
 
    meio = (p+r)/2;//buscando o pivo
 
    a = A[p].idade;
 
    b = A[meio].idade;
 
    c = A[r].idade;
 
    medianaIndice = 0;
 
    if (a < b)
 
        if (b < c)
 
            medianaIndice = meio;
 
        else
 
        if (a < c)
 
            medianaIndice = r;
 
        else
 
            medianaIndice = p;
 
    else
 
    if (c < b)
 
        medianaIndice = meio;
 
    else
 
    if (c < a) //b <= c && c < a
 
        medianaIndice = r;
 
    else //b <= a && a <= c
 
        medianaIndice = p;
 
    swap(A, medianaIndice, r);
 
//quicksort em si
 
    pivo=A[r];
 
    i=p-1;
 
 
 
    for (j = p; j <= r - 1; j++) {
 
        if (A[j].idade <= pivo.idade) {
 
            i = i + 1;
 
            swap(A, i, j);
 
        }
 
    }
 
    swap(A, i + 1, r);
 
    return i + 1;
 
 
 
 
 
 
 
}
 
void quick(pessoa A[],int p,int r){
 
    int q;
 
 
 
    if (p<r){
 
        q = partition(A,p,r);
 
        quick(A,p,q-1);
 
        quick(A,q+1,r);
 
    }
 
}
 
 
 
int proc(pessoa nomes[], char n1[], char n2[], int N){
 
 
 
    int i,j=0;
 
    for(i=0;i<N-1;i++){
 
        if(nomes[i].nome[1] == n1[1] && nomes[i].nome[2] == n1[2] && nomes[i].nome[0] == n1[0] && j==0){
 
            return 0;
 
        }
 
        if(nomes[i].nome[1] == n2[1])
 
            j++;
 
    }
 
    return 1;
 
}
 
int main(){
 
    int N, P,M,i,est=0;
 
 
 
    pessoa *nomes;
 
    scanf("%d", &N);
 
 
 
    nomes=(pessoa*)malloc(N* sizeof(pessoa));
 
    pessoa *ordem=(pessoa*)malloc(N* sizeof(pessoa));
 
    for(i=0; i<N;i++){
 
        scanf("%s %d",&nomes[i].nome, &nomes[i].idade);
 
        strcpy(ordem[i].nome, nomes[i].nome);
 
        ordem[i].idade=nomes[i].idade;
 
    }
 
    scanf("%d %d", &P, &M);
 
 
 
    quick(ordem, 0,N-1);
 
 
 
    for(i=0; i<N-1;i++){
 
        if(ordem[i].idade==ordem[i+1].idade){
 
            est+=proc(nomes, ordem[i].nome,ordem[i+1].nome,N);
 
        }
 
    }
 
    if(est==0)
 
        printf("yes\n");
 
    else
 
        printf("no\n");
 
    for(i=P-1; i<M+P-1;i++)
 
        printf("%s %d\n", ordem[i].nome, ordem[i].idade);
 
    return 0;
 
}
